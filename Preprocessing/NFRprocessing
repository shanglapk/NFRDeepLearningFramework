import nltk
import re
import numpy as np
import pandas as pd
from nltk.stem.wordnet import WordNetLemmatizer
nltk.download('wordnet')
STOPWORDS = set(stopwords.words('english'))
df = pd.read_csv('/content/NFR_five.csv', encoding='latin1')
#Regex options to find the special characters
REPLACE_BY_SPACE = re.compile('[/(){}\|@,;]')
#Regex options to find the bad symbols
BAD_SYMBOLS = re.compile('[^0-9a-z #+_]')
#Import stopwords from the nltk.corpus and apply to the data
STOPWORDS = set(stopwords.words('english'))
# Custom words found by manually looking at the dataset observations
ignore_words = [
    'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 
    "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 
    'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 
    'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 
    'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 
    'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 
    'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 
    'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 
    'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 
    'against', 'between', 'into', 'through', 'during', 'before', 'after', 
    'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 
    'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 
    'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 
    'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 
    'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 
    'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 
    'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 
    'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 
    'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', 
    "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 
    'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't", 
    '?', '%', '/', '(', ')', '[', ']', '-', ':', ';', 'system', 'product', 
    'application', 'should', 'would', 'shall', 'go', 'System', 'system.', 
    'System.','â€',"'",]
     

# function to perform data cleansing steps to convert to lower case, remove stop words, and to ignore custom words from the list manually gleaned as shown above
def clean_nfr (text):
    text = text.lower() # lowercase text
    text = REPLACE_BY_SPACE.sub(' ', text) # replace REPLACE_BY_SPACE symbols by space in text. substitute the matched string in REPLACE_BY_SPACE with space.
    text = BAD_SYMBOLS.sub('', text) # remove symbols which are in BAD_SYMBOLS from text. substitute the matched string in BAD_SYMBOLS with nothing. 
    #text = text.replace('x', '')
    text = ' '.join(word for word in text.split() if word not in STOPWORDS) # remove stopwords from text
    text = ' '.join(word for word in text.split() if word not in ignore_words) # remove words unique to requirements dataset
    return text
#apply the function on the df from previous step   
from nltk.stem.wordnet import WordNetLemmatizer
wordnet_lemmatizer = WordNetLemmatizer()
df['sentence'] = df['sentence'].apply(clean_text)
df['sentence'] = df['sentence'].apply(lambda word: wordnet_lemmatizer.lemmatize(word, pos='v'))
print(df["sentence"]) 
