from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import regularizers
from tensorflow.keras.constraints import max_norm
#kernel_regularizer = regularizers.L2()
from sklearn.metrics import multilabel_confusion_matrix
from sklearn.metrics import accuracy_score, f1_score, precision_score, 
recall_score, classification_report, confusion_matrix, multilabel_confusion_matrix,
from keras.callbacks import Callback, ReduceLROnPlateau, EarlyStopping
from keras.layers import BatchNormalization

#preparing NFR for for ANN
tfidv = TfidfVectorizer(max_features=5000, min_df=1, smooth_idf=True, norm = 'l2')
X = tfidv.fit_transform(df['sentence'].values)
print("term frequence are",X)
print(X.sort_indices())

Y = pd.get_dummies(df['class_name'])
Y = pd.get_dummies(df['class_name']).values
print('Shape of label tensor:', Y.shape)
# pandas.factorize() method helps to get the numeric representation of an array by identifying distinct values
y, y_uniques=pd.factorize(df['class_name'], sort=True)
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state = 34, stratify=Y)
# Model creation

reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-6, verbose=1)
early_stop = EarlyStopping(monitor='val_loss', min_delta=0, patience=10, mode='auto')
def create_model():
    model = Sequential()
    model.add(Dense(units=2128,activation="relu",input_dim=X.shape[1]))
    model.add(Dropout(0.2))
    model.add(Dense(units=256,activation="relu"))
    model.add(Dropout(0.7))
    model.add(Dense(units=128,activation="relu"))
    model.add(Dropout(0.8))
    model.add(Dense(units= 5,activation="softmax"))
    print(model.summary())
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

num_epochs = 100
model = create_model()
history = model.fit(X_train, Y_train, epochs=num_epochs, batch_size = 32,callbacks=[reduce_lr, early_stop], validation_data=(X_test,  Y_test), verbose=2)
import matplotlib.pyplot as plt
 
import matplotlib.pyplot as plt
# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('DReqANN model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('DReqANN model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# print confusion matrix
y_pred = model.predict(X_test)
y_pred = (y_pred >= 0.5)
cm = confusion_matrix(Y_test.argmax(axis=1),y_pred.argmax(axis=1))
print(cm)
ax = sns.heatmap(cm, annot=True, cmap='Blues')
ax.set_title('DReqANN Model Confusion Matrix\n\n');
ax.set_xlabel('\nPredicted NFR Category')
ax.set_ylabel('Actual NFR Category ');

## Ticket labels - List must be in alphabetical order
ax.xaxis.set_ticklabels(['M', 'O', 'PE','SE','US'])
ax.yaxis.set_ticklabels(['M', 'O', 'PE','SE','US']) 
from sklearn.metrics import accuracy_score
score = accuracy_score(y_pred, Y_test)
print(score)
from sklearn.metrics import classification_report
target_names = ['Maintainability', 'Operability', 'Performance','Security','Usability']
print(classification_report(Y_test, y_pred, target_names=target_names))
oss, accuracy = model.evaluate(X_train, Y_train, verbose=False)
print("Training Accuracy: {:.4f}".format(accuracy))
loss, accuracy = model.evaluate(X_test, Y_test, verbose=False)
print("Testing Accuracy:  {:.4f}".format(accuracy))
#preparing x for ANN
tfidv = TfidfVectorizer(max_features=5000, min_df=1, smooth_idf=True, norm = 'l2')
X = tfidv.fit_transform(df['sentence'].values)
print("term frequence are",X)
print(X.sort_indices())

Y = pd.get_dummies(df['class_name'])
Y = pd.get_dummies(df['class_name']).values
print('Shape of label tensor:', Y.shape)
# pandas.factorize() method helps to get the numeric representation of an array by identifying distinct values
y, y_uniques=pd.factorize(df['class_name'], sort=True)
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state = 34, stratify=Y)
# Model creation
from tensorflow.keras.optimizers import Adam
from keras.optimizers import adam_v2
from tensorflow.keras import regularizers
from tensorflow.keras.constraints import max_norm
#kernel_regularizer = regularizers.L2()
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-6, verbose=1)
early_stop = EarlyStopping(monitor='val_loss', min_delta=0, patience=10, mode='auto')
def create_model():
    model = Sequential()
    model.add(Dense(units=2128,activation="relu",input_dim=X.shape[1]))
    model.add(Dropout(0.2))
    model.add(Dense(units=256,activation="relu"))
    model.add(Dropout(0.7))
    model.add(Dense(units=128,activation="relu"))
    model.add(Dropout(0.8))
    model.add(Dense(units= 5,activation="softmax"))
    print(model.summary())
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

num_epochs = 100
model = create_model()
history = model.fit(X_train, Y_train, epochs=num_epochs, batch_size = 32,callbacks=[reduce_lr, early_stop], validation_data=(X_test,  Y_test), verbose=2)
import matplotlib.pyplot as plt
 
import matplotlib.pyplot as plt
# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('DReqANN model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('DReqANN model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# print confusion matrix
y_pred = model.predict(X_test)
y_pred = (y_pred >= 0.5)
cm = confusion_matrix(Y_test.argmax(axis=1),y_pred.argmax(axis=1))
print(cm)
ax = sns.heatmap(cm, annot=True, cmap='Blues')
ax.set_title('DReqANN Model Confusion Matrix\n\n');
ax.set_xlabel('\nPredicted NFR Category')
ax.set_ylabel('Actual NFR Category ');

## Ticket labels - List must be in alphabetical order
ax.xaxis.set_ticklabels(['M', 'O', 'PE','SE','US'])
ax.yaxis.set_ticklabels(['M', 'O', 'PE','SE','US']) 
from sklearn.metrics import accuracy_score
score = accuracy_score(y_pred, Y_test)
print(score)
from sklearn.metrics import classification_report
target_names = ['Maintainability', 'Operability', 'Performance','Security','Usability']
print(classification_report(Y_test, y_pred, target_names=target_names))
oss, accuracy = model.evaluate(X_train, Y_train, verbose=False)
print("Training Accuracy: {:.4f}".format(accuracy))
loss, accuracy = model.evaluate(X_test, Y_test, verbose=False)
print("Testing Accuracy:  {:.4f}".format(accuracy))
